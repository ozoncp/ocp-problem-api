// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-problem-api/ocp-problem-api.proto

package ocp_problem_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ProblemV1 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProblemV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Text

	return nil
}

// ProblemV1ValidationError is the validation error returned by
// ProblemV1.Validate if the designated constraints aren't met.
type ProblemV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemV1ValidationError) ErrorName() string { return "ProblemV1ValidationError" }

// Error satisfies the builtin error interface
func (e ProblemV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblemV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemV1ValidationError{}

// Validate checks the field values on ResultSaveV1 with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResultSaveV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ResultSaveV1ValidationError is the validation error returned by
// ResultSaveV1.Validate if the designated constraints aren't met.
type ResultSaveV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResultSaveV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResultSaveV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResultSaveV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResultSaveV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResultSaveV1ValidationError) ErrorName() string { return "ResultSaveV1ValidationError" }

// Error satisfies the builtin error interface
func (e ResultSaveV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResultSaveV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResultSaveV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResultSaveV1ValidationError{}

// Validate checks the field values on ProblemQueryV1 with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProblemQueryV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ProblemQueryV1ValidationError is the validation error returned by
// ProblemQueryV1.Validate if the designated constraints aren't met.
type ProblemQueryV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemQueryV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemQueryV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemQueryV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemQueryV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemQueryV1ValidationError) ErrorName() string { return "ProblemQueryV1ValidationError" }

// Error satisfies the builtin error interface
func (e ProblemQueryV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblemQueryV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemQueryV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemQueryV1ValidationError{}

// Validate checks the field values on ProblemFilterV1 with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProblemFilterV1) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ProblemFilterV1ValidationError is the validation error returned by
// ProblemFilterV1.Validate if the designated constraints aren't met.
type ProblemFilterV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemFilterV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemFilterV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemFilterV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemFilterV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemFilterV1ValidationError) ErrorName() string { return "ProblemFilterV1ValidationError" }

// Error satisfies the builtin error interface
func (e ProblemFilterV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblemFilterV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemFilterV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemFilterV1ValidationError{}

// Validate checks the field values on ProblemListQueryV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProblemListQueryV1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProblemListQueryV1ValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ProblemListQueryV1ValidationError is the validation error returned by
// ProblemListQueryV1.Validate if the designated constraints aren't met.
type ProblemListQueryV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemListQueryV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemListQueryV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemListQueryV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemListQueryV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemListQueryV1ValidationError) ErrorName() string {
	return "ProblemListQueryV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ProblemListQueryV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblemListQueryV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemListQueryV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemListQueryV1ValidationError{}

// Validate checks the field values on ProblemListV1 with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProblemListV1) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProblemListV1ValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProblemListV1ValidationError is the validation error returned by
// ProblemListV1.Validate if the designated constraints aren't met.
type ProblemListV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemListV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemListV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemListV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemListV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemListV1ValidationError) ErrorName() string { return "ProblemListV1ValidationError" }

// Error satisfies the builtin error interface
func (e ProblemListV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblemListV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemListV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemListV1ValidationError{}

// Validate checks the field values on ProblemResultV1 with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProblemResultV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsSuccess

	// no validation rules for Id

	// no validation rules for Text

	return nil
}

// ProblemResultV1ValidationError is the validation error returned by
// ProblemResultV1.Validate if the designated constraints aren't met.
type ProblemResultV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemResultV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemResultV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemResultV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemResultV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemResultV1ValidationError) ErrorName() string { return "ProblemResultV1ValidationError" }

// Error satisfies the builtin error interface
func (e ProblemResultV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblemResultV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemResultV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemResultV1ValidationError{}
